'''
S = "ATTP"
p = "ccccc"
print(p.upper())      #делает из маленьких букв большие
print(S.lower())       # из больших мальнькие
print(p.count("ccc"))      #определяет сколько c есть в переменной p
print(S.find("T"))    #  под каким числом стоит буква
print(S.replace("AT","biy"))   # заменяет или подставляет буквы на другие в переменной



S= "agTtsAGtc"
print(S.upper().count("gt".upper())) #после превращения из мален.букв в большие там есть только 2 символа GT и поэтому в строке пишется 2

dna = "ATTGL"
print(dna[1:-1:3])


n=input("ДОВОД")
j=len(n)-1
i=0
is_palindrom = True
while i<j:
 if n[i]!= n[j]:
  is_palindrom = False
 i+= 1
 j -= 1
if is_palindrom:
  print("YES")
else:
  print("NO")
'''



'''import random
element = ['A', 'B', 'S', 'D']
a = [random.choice(element) for i in range (5)]
print(a)'''



'''import random
a = [random.randint(1, 100) for i in range (5)]
print(a)'''

'''
import random
a = [random.randint(1, 100) for i in range (2)]
b = [random.randint(1, 100) for j in range (2)]
m = [a]+[b]

print(m)'''

'''
def min(x,y):
    if x<=y:
        return x
    else:
        return y 
k =min(3,6)
print(k)
t= min(min(3,6),8)
print(t)'''

'''
def f(*n):
    m=n[0]
    for x in n:
        if m >x:
            m=x
            return m
print(f(2,4,6,9,8))
'''


'''
#
# a=1
# print(a,end="90")#конец
'''

'''
def e(a):
    a.append(9)

a = []
e(a)
print(a)
'''




'''
s = set()
basket ={'кря','га','кря','курлык','кар','ко-ко'}
for i in basket:
    print(i)
'''


'''
basket.add('кар')
print(len(basket))
print('кря' in basket)
print('угууу' in basket)
basket.discard('угу')
basket.remove('угу')
print(basket)
'''


'''
    <ключ>: знач
d = {9: 456,7:"767", 'tyty': 9*8, 2:2, }
print(d[2])
'''


'''
basket ={1:'кря',2:'га',3:'кря',4:'курлык',5:'кар',6:'ко-ко'}
basket.pop (3)
basket [7]='ро'
print(basket[2])
del basket[3]
print(basket)
'''


'''
for key in basket.keys():
    print(key, end='')

for keo in basket.values():
    print(keo, end='')

for kuu in basket.items():
    print(kuu, end='')

for key,keo in basket.items():
    print(key,keo, end='')
'''


'''
basket ={1:'кря',2:['га','кря','курлык'],3:'кар',4:['ко-ко']}
print(basket[2][0])
'''

from numpy import *
'''
a = array([2, 3, 4])  # Создание одномерного массива из списка целых чисел 
print(a)
'''

'''
print(a.ndim)  # размерность массива (одномерный, двумерный и тд) 
print(a.shape)  # размеры массива 
'''


'''
b = array([(1.5, 2, 3), (4, 5, 6)])  # создание двумерного массива из двух последовательностей чисел 
print(b)  # все числа имеют один тип - число с плавающей точкой 
print(b.ndim)
print(b.shape)
print(b.size)
'''


'''
z = zeros((3, 2))  # 3, 2 помещаются в дополнительные скобки, чтобы представлять из себя один объект 
print(z)  # создался 2мерный массив 
'''


'''
print(arange(10, 30, 5))  # функция аналогична ф-ции range, но возвращает массив 
'''

'''
print(linspace(0, 2, 9))  # генерирует 9 чисел на отрезке от 0 до 2 
'''

'''
d = arange(12).reshape(4, 3)  # 1 - количество строчек, 2-количество столбцов 
print(d)  # превратили одномерный массив в двумерный с решейп 
'''


'''
# операции над массивами 

x = array([10, 20, 30])
y = arange(3)
print(x)
print(y)

print(x + y)  # работает поэлементно 
print(x - y)

# возведение в квадрат 
print(x ** 2)

# массив как аргумент какой-то функции 
print(2 * sin(x))

# операции сравнени 

print(a < 20)
'''

'''
file = open('fth.txt','r')
S1 = file.readline()
print(S1)

with open('fth.txt') as file:
    S1 = file.readline()
    print(S1)
'''





'''

не изученная тема

from numpy import * 
 
a= array([2, 3, 4]) #Создание одномерного массива из списка целых чисел 
print(a) 
 
print(a.ndim) #размерность массива (одномерный, двумерный и тд) 
print(a.shape) #размеры массива 
 
b = array([(1.5, 2, 3), (4, 5, 6)]) #создание двумерного массива из двух последовательностей чисел 
print(b) #все числа имеют один тип - число с плавающей точкой 
print(b.ndim) 
print(b.shape) 
print(b.size) 
 
z=zeros((3,2)) #3, 2 помещаются в дополнительные скобки, чтобы представлять из себя один объект 
print(z) #создался 2мерный массив 
 
print(arange(10, 30, 5)) #функция аналогична ф-ции range, но возвращает массив 
 
print(linspace(0, 2, 9)) #генерирует 9 чисел на отрезке от 0 до 2 
 
d = arange(12).reshape(4, 3)  #1 - количество строчек, 2-количество столбцов 
print(d) #превратили одномерный массив в двумерный с решейп 
 
#операции над массивами 
 
x = array([10, 20, 30]) 
y = arange(3) 
print(x) 
print(y) 
 
print(x+y) #работает поэлементно 
print(x-y) 
 
#возведение в квадрат 
print(x**2) 
 
#массив как аргумент какой-то функции 
print(2*sin(x)) 
 
#операции сравнени 
 
print(a<20)
from  pylab import * 
 
x = linspace(0, 5, 10)  #2 массива одинакового размера 
y = x ** 2 
print(x) 
print(y) 
 
#построим график для этих точек 
 
figure() #функция 
plot(x, y, 'r') #функция с параметрами x и y, + параметр цвета линии 
xlabel('x') #название ветки 
ylabel('y') #название ветки 
title('title') #название окошка 
show() #демонстрация 
 
#точный график можно создать чуть-чуть по-другому 
#создаём специальный объект - фигуру и на фигуру добавим оси и сам график 
 
fig = plt.figure() 
 
axes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) #left, bottom, width, height (range 0 to 1) 
axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) 
 
#main figure 
axes.plot(x, y, 'r') 
 
axes.set_xlabel('x') 
axes.set_ylabel('y') 
axes.set_title('title') 
 
#insert 
axes2.plot(y, x, 'g') #перевернутый график 
 
axes2.set_xlabel('x') 
axes2.set_ylabel('y') 
axes2.set_title('insert title') 
 
fig, axes = plt.subplots(nrows=1, ncols=2) # возможность сделать два графика

 
for ax in axes: 
    ax.plot(x, y, 'r') 
    ax.set_xlabel('x') 
    ax.set_ylabel('y') 
    ax.set_title('title') 
fig.tight_layout() 
 
#как настроить размер фигуры: 
 
fig, axes = plt.subplots(figsize=(12, 3)) 
 
axes.plot(x, y, 'r') 
axes.set_xlabel('x') 
axes.set_ylabel('y') 
axes.set_title('title') 
 
fig, ax = plt.subplots() 
 
ax.plot(x, x**2, label="y=x**2") 
ax.plot(x, x**3, label="y=x**3") 
ax.legend(loc=2) #легенда размещается в левом верхнем углу 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_title('title') 
 
#построение гистограм 
from numpy import * 
 
n = random.randn(1000000) 
fig, axes = plt.subplots(1, 2, figsize=(12, 4)) #построение 2 граф-в 
 
#1 
axes[0].hist(n) #вместо plot 
axes[0].set_title("Gist") 
axes[0].set_xlim(min(n), max(n)) #значения по осям 
 
#2 
axes[1].hist(n, cumulative=True, bins=50) #bins - количество вертикальных столбцов в графике 
axes[1].set_title("Gist 2") 
axes[1].set_xlim(min(n), max(n))


'''
import  numpy as np
import matplotlib.pyplot as plt

x=np.array([0, 100, 84, 25])
y = np.array([-17.8, 37.87, 28.89, -3.89])

_,ax=plt.subplots()
ax.plot(x, y, color="b", marker='.')
ax.set_xlabel("F")
ax.set_ylabel("C")
plt.show()









count = 601

k = np.zeros(count)

temp = -3
i=0
while temp <= 3:
  k[i]=temp
  i+=1
  temp+=0.01

h = np.zeros(4)
J_i = np.zeros(4)

J = np.zeros(count)

for j in range(count):
  for i in range(4):
    h[i] = k[j] * X[i]
    J_i[i] = (h[i] - Y[i])**2
  J[j] =  J_i.sum() * (1/(2*count))


_,ax = plt.subplots()
ax.set_title("График зависимости ошибки от коэффициента k")
ax.set_xlabel("Ошибка")
ax.set_ylabel("k")
ax.plot(k, J, color = "b")




def computeCost(X, y, theta): # функция стоимости
  m = len(y)
  J = 0
  h = X * theta[1] + theta[0]
  squaredErrors = (h - y) ** 2
  J = (1 /  m) * squaredErrors.sum()
  return J
  
  
  
  
  
def gradientDescent(X, y, theta, alpha, num_iters): #градиентный спуск (парный градиентный спуск)
  m = len(y)
  J_history = np.zeros((num_iters, 1))
  min_theta = np.zeros((2, 1))
  minJ=1000000000000000

  for iter in range(num_iters): #Обучение
    h = X * theta[1] + theta[0]

    theta[0] -= alpha * (1 / m) * ((h - y)).sum()
    theta[1] -= alpha * (1 / m) * ((h - y)* X).sum()


    cost = computeCost(X, y, theta)
    J_history[iter] = cost
    print(f"{iter} epochs: {cost}")

    if cost<minJ: #Запись тета
      minJ=cost
      min_theta = theta


  _,ax = plt.subplots()#Вывод истории ошибок
  ax.set_title("График ошибки")
  ax.set_xlabel("Шаг")
  ax.set_ylabel("J")
  ax.plot(np.arange(len(J_history)), J_history, color = "b")
  return min_theta
  
  
  
  
  
iterations = 10000000 #Кол-во эпох обучения
alpha = 0.0001 #Коэффициент обучения
theta = np.random.random(2) #Изначальные веса

theta = gradientDescent(X, Y, theta, alpha, iterations)# обучение
print(theta)





_,ax = plt.subplots()#Вывод истории ошибок
  ax.set_title("График ошибки")
  ax.set_xlabel("Шаг")
  ax.set_ylabel("J")
  ax.plot(np.arange(len(J_history)), J_history, color = "b")
  return min_theta



'''





'''
